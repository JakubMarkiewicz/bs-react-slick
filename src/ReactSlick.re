[@bs.module "./polyfills"] external pols: unit = "";

[@bs.obj]
external makePropsSlick:
  (
    ~accessibility: bool=?,
    ~adaptiveHeight: bool=?,
    ~afterChange: int => unit=?,
    ~appendDots: unit => React.element=?,
    ~arrows: bool=?,
    ~autoplaySpeed: int=?,
    ~autoplay: bool=?,
    ~beforeChange: (int, int) => unit=?,
    ~centerMode: bool=?,
    ~centerPadding: string=?,
    ~className: string=?,
    ~customPaging: int => React.element=?,
    ~dotsClass: string=?,
    ~dots: bool=?,
    ~draggable: bool=?,
    ~easing: string=?,
    ~fade: bool=?,
    ~focusOnSelect: bool=?,
    ~infinite: bool=?,
    ~initialSlide: int=?,
    ~onEdge: string => unit=?,
    ~onInit: unit => unit=?,
    ~onReInit: unit => unit=?,
    ~onSwipe: unit => unit=?,
    ~pauseOnDotsHover: unit => unit=?,
    ~pauseOnFocus: unit => unit=?,
    ~pauseOnHover: unit => unit=?,
    ~rows: int=?,
    ~rtl: bool=?,
    ~slide: string=?,
    ~slidesPerRow: int=?,
    ~slidesToScroll: int=?,
    ~slidesToShow: int=?,
    ~speed: int=?,
    ~swipe: bool=?,
    ~touchMove: bool=?,
    ~touchThreshold: int=?,
    ~useCSS: bool=?,
    ~useTransform: bool=?,
    ~variableWidth: bool=?,
    ~children: React.element
  ) =>
  _ =
  "";

[@bs.module "react-slick"]
external reactComponent: React.component('a) = "default";

[@react.component]
let make =
    (
      ~accessibility: option(bool)=?,
      ~adaptiveHeight: option(bool)=?,
      ~afterChange: option(int => unit)=?,
      ~appendDots: option(unit => React.element)=?,
      ~arrows: option(bool)=?,
      ~autoplaySpeed: option(int)=?,
      ~autoplay: option(bool)=?,
      ~beforeChange: option((int, int) => unit)=?,
      ~centerMode: option(bool)=?,
      ~centerPadding: option(string)=?,
      ~className: option(string)=?,
      ~customPaging: option(int => React.element)=?,
      ~dotsClass: option(string)=?,
      ~dots: option(bool)=?,
      ~draggable: option(bool)=?,
      ~easing: option(string)=?,
      ~fade: option(bool)=?,
      ~focusOnSelect: option(bool)=?,
      ~infinite: option(bool)=?,
      ~initialSlide: option(int)=?,
      ~onEdge: option(string => unit)=?,
      ~onInit: option(unit => unit)=?,
      ~onReInit: option(unit => unit)=?,
      ~onSwipe: option(unit => unit)=?,
      ~pauseOnDotsHover: option(unit => unit)=?,
      ~pauseOnFocus: option(unit => unit)=?,
      ~pauseOnHover: option(unit => unit)=?,
      ~rows: option(int)=?,
      ~rtl: option(bool)=?,
      ~slide: option(string)=?,
      ~slidesPerRow: option(int)=?,
      ~slidesToScroll: option(int)=?,
      ~slidesToShow: option(int)=?,
      ~speed: option(int)=?,
      ~swipe: option(bool)=?,
      ~touchMove: option(bool)=?,
      ~touchThreshold: option(int)=?,
      ~useCSS: option(bool)=?,
      ~useTransform: option(bool)=?,
      ~variableWidth: option(bool)=?,
      ~children: React.element,
    ) =>
  React.createElement(
    reactComponent,
    makePropsSlick(
      ~accessibility?,
      ~adaptiveHeight?,
      ~afterChange?,
      ~appendDots?,
      ~arrows?,
      ~autoplaySpeed?,
      ~autoplay?,
      ~beforeChange?,
      ~centerMode?,
      ~centerPadding?,
      ~className?,
      ~customPaging?,
      ~dotsClass?,
      ~dots?,
      ~draggable?,
      ~easing?,
      ~fade?,
      ~focusOnSelect?,
      ~infinite?,
      ~initialSlide?,
      ~onEdge?,
      ~onInit?,
      ~onReInit?,
      ~onSwipe?,
      ~pauseOnDotsHover?,
      ~pauseOnFocus?,
      ~pauseOnHover?,
      ~rows?,
      ~rtl?,
      ~slide?,
      ~slidesPerRow?,
      ~slidesToScroll?,
      ~slidesToShow?,
      ~speed?,
      ~swipe?,
      ~touchMove?,
      ~touchThreshold?,
      ~useCSS?,
      ~useTransform?,
      ~variableWidth?,
      ~children,
    ),
  );